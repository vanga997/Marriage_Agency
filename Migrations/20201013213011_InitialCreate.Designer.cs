// <auto-generated />
using System;
using Marriage_Agency.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Marriage_Agency.Migrations
{
    [DbContext(typeof(Marriage_AgencyContext))]
    [Migration("20201013213011_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Marriage_Agency.Models.Должности", b =>
                {
                    b.Property<int>("КодДолжности")
                        .HasColumnName("Код_должности")
                        .HasColumnType("INT");

                    b.Property<string>("НаименованиеДолжности")
                        .IsRequired()
                        .HasColumnName("Наименование_должности")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<string>("Обязанности")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)");

                    b.Property<double>("Оклад")
                        .HasColumnType("FLOAT");

                    b.Property<string>("Требования")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)");

                    b.HasKey("КодДолжности");

                    b.ToTable("Должности");
                });

            modelBuilder.Entity("Marriage_Agency.Models.ДополнительныеУслуги", b =>
                {
                    b.Property<int>("КодУслуги")
                        .HasColumnName("Код_услуги")
                        .HasColumnType("INT");

                    b.Property<string>("Наименование")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)");

                    b.Property<string>("Описание")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)");

                    b.Property<double>("Цена")
                        .HasColumnType("FLOAT");

                    b.HasKey("КодУслуги");

                    b.ToTable("Дополнительные_услуги");
                });

            modelBuilder.Entity("Marriage_Agency.Models.ЗнакиЗодиака", b =>
                {
                    b.Property<int>("КодЗнака")
                        .HasColumnName("Код_знака")
                        .HasColumnType("INT");

                    b.Property<string>("Наименование")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)");

                    b.Property<string>("Описание")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)");

                    b.HasKey("КодЗнака");

                    b.ToTable("Знаки_зодиака");
                });

            modelBuilder.Entity("Marriage_Agency.Models.Клиенты", b =>
                {
                    b.Property<int>("КодКлиента")
                        .HasColumnName("Код_клиента")
                        .HasColumnType("INT");

                    b.Property<string>("Адрес")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)");

                    b.Property<int>("Вес")
                        .HasColumnType("INT");

                    b.Property<int>("Возраст")
                        .HasColumnName("_Возраст")
                        .HasColumnType("INT");

                    b.Property<string>("ВредныеПривычки")
                        .IsRequired()
                        .HasColumnName("Вредные_привычки")
                        .HasColumnType("VARCHAR(100)");

                    b.Property<byte[]>("ДатаРождения")
                        .IsRequired()
                        .HasColumnName("Дата_рождения")
                        .HasColumnType("DataTime");

                    b.Property<string>("ИнформацияОПартнёре")
                        .IsRequired()
                        .HasColumnName("Информация_о_партнёре")
                        .HasColumnType("VARCHAR(100)");

                    b.Property<int>("КодЗнака")
                        .HasColumnName("Код_знака")
                        .HasColumnType("INT");

                    b.Property<int>("КодНациональности")
                        .HasColumnName("Код_национальности")
                        .HasColumnType("INT");

                    b.Property<int>("КодОтношения")
                        .HasColumnName("Код_отношения")
                        .HasColumnType("INT");

                    b.Property<int>("КодУслуги")
                        .HasColumnName("Код_услуги")
                        .HasColumnType("INT");

                    b.Property<int>("КодУслуги1")
                        .HasColumnName("Код_услуги_1")
                        .HasColumnType("INT");

                    b.Property<int>("КодУслуги2")
                        .HasColumnName("Код_услуги_2")
                        .HasColumnType("INT");

                    b.Property<int>("КодУслуги3")
                        .HasColumnName("Код_услуги_3")
                        .HasColumnType("INT");

                    b.Property<int>("КоличествоДетей")
                        .HasColumnName("Количество_детей")
                        .HasColumnType("INT");

                    b.Property<string>("Описание")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)");

                    b.Property<string>("ПаспортныеДанные")
                        .IsRequired()
                        .HasColumnName("Паспортные_данные")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<string>("Пол")
                        .IsRequired()
                        .HasColumnType("CHAR(1)");

                    b.Property<int>("Рост")
                        .HasColumnType("INT");

                    b.Property<string>("СемейноеПоложение")
                        .IsRequired()
                        .HasColumnName("Семейное_положение")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<string>("Телефон")
                        .IsRequired()
                        .HasColumnType("VARCHAR(11)");

                    b.Property<string>("Фио")
                        .IsRequired()
                        .HasColumnName("ФИО")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<string>("Хобби")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)");

                    b.HasKey("КодКлиента");

                    b.HasIndex("КодЗнака");

                    b.HasIndex("КодНациональности");

                    b.HasIndex("КодОтношения");

                    b.HasIndex("КодУслуги");

                    b.ToTable("Клиенты");
                });

            modelBuilder.Entity("Marriage_Agency.Models.Национальности", b =>
                {
                    b.Property<int>("КодНациональности")
                        .HasColumnName("Код_национальности")
                        .HasColumnType("INT");

                    b.Property<string>("Замечания")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)");

                    b.Property<string>("Наименование")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)");

                    b.HasKey("КодНациональности");

                    b.ToTable("Национальности");
                });

            modelBuilder.Entity("Marriage_Agency.Models.Отношения", b =>
                {
                    b.Property<int>("КодОтношения")
                        .HasColumnName("Код_отношения")
                        .HasColumnType("INT");

                    b.Property<string>("Наименование")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)");

                    b.Property<string>("Описание")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)");

                    b.HasKey("КодОтношения");

                    b.ToTable("Отношения");
                });

            modelBuilder.Entity("Marriage_Agency.Models.Сотрудники", b =>
                {
                    b.Property<int>("КодСотрудника")
                        .HasColumnName("Код_сотрудника")
                        .HasColumnType("INT");

                    b.Property<string>("Адрес")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)");

                    b.Property<int>("Возраст")
                        .HasColumnType("INT");

                    b.Property<int>("КодДолжности")
                        .HasColumnName("Код_должности")
                        .HasColumnType("INT");

                    b.Property<string>("ПаспортныеДанные")
                        .IsRequired()
                        .HasColumnName("Паспортные_данные")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<string>("Пол")
                        .IsRequired()
                        .HasColumnType("CHAR(1)");

                    b.Property<string>("Телефон")
                        .IsRequired()
                        .HasColumnType("VARCHAR(11)");

                    b.Property<string>("Фио")
                        .IsRequired()
                        .HasColumnName("ФИО")
                        .HasColumnType("VARCHAR(50)");

                    b.HasKey("КодСотрудника");

                    b.HasIndex("КодДолжности");

                    b.ToTable("Сотрудники");
                });

            modelBuilder.Entity("Marriage_Agency.Models.Услуги", b =>
                {
                    b.Property<int>("КодУслуги")
                        .HasColumnName("Код_услуги")
                        .HasColumnType("INT");

                    b.Property<byte[]>("Дата")
                        .IsRequired()
                        .HasColumnType("DataTime");

                    b.Property<int>("КодСотрудника")
                        .HasColumnName("Код_сотрудника")
                        .HasColumnType("INT");

                    b.Property<double>("Стоимость")
                        .HasColumnType("FLOAT");

                    b.HasKey("КодУслуги");

                    b.HasIndex("КодСотрудника");

                    b.ToTable("Услуги");
                });

            modelBuilder.Entity("Marriage_Agency.Models.Клиенты", b =>
                {
                    b.HasOne("Marriage_Agency.Models.ЗнакиЗодиака", "КодЗнакаNavigation")
                        .WithMany("Клиенты")
                        .HasForeignKey("КодЗнака")
                        .IsRequired();

                    b.HasOne("Marriage_Agency.Models.Национальности", "КодНациональностиNavigation")
                        .WithMany("Клиенты")
                        .HasForeignKey("КодНациональности")
                        .IsRequired();

                    b.HasOne("Marriage_Agency.Models.Отношения", "КодОтношенияNavigation")
                        .WithMany("Клиенты")
                        .HasForeignKey("КодОтношения")
                        .IsRequired();

                    b.HasOne("Marriage_Agency.Models.Услуги", "КодУслугиNavigation")
                        .WithMany("Клиенты")
                        .HasForeignKey("КодУслуги")
                        .IsRequired();
                });

            modelBuilder.Entity("Marriage_Agency.Models.Сотрудники", b =>
                {
                    b.HasOne("Marriage_Agency.Models.Должности", "КодДолжностиNavigation")
                        .WithMany("Сотрудники")
                        .HasForeignKey("КодДолжности")
                        .IsRequired();
                });

            modelBuilder.Entity("Marriage_Agency.Models.Услуги", b =>
                {
                    b.HasOne("Marriage_Agency.Models.Сотрудники", "КодСотрудникаNavigation")
                        .WithMany("Услуги")
                        .HasForeignKey("КодСотрудника")
                        .IsRequired();

                    b.HasOne("Marriage_Agency.Models.ДополнительныеУслуги", "КодУслугиNavigation")
                        .WithOne("Услуги")
                        .HasForeignKey("Marriage_Agency.Models.Услуги", "КодУслуги")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
